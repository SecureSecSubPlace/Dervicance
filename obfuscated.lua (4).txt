local function splitString(str, delimiter)
    local result = {}
    for match in string.gmatch(str, "([^" .. delimiter .. "]+)") do
        table.insert(result, match)
    end
    return result
end

local function customDecrypt(encryptedStr)
    local parts = splitString(encryptedStr, "|")
    if #parts < 3 then error("❌ Decryption failed: Invalid format.") end

    local shift = tonumber(parts[1]) -- Extract Unix timestamp shift
    local map = splitString(parts[2], ",")
    local encryptedBytes = splitString(parts[3], "!")

    if #map ~= #encryptedBytes then error("❌ Decryption failed: Map size mismatch.") end

    local decrypted = {}
    for i = 1, #encryptedBytes do
        local encryptedByte = tonumber(encryptedBytes[i])
        local mappedShift = tonumber(map[i])
        local originalByte = encryptedByte - shift - mappedShift
        table.insert(decrypted, string.char(originalByte))
    end

    return table.concat(decrypted)
end

-- **🚀 Fetch the encrypted string dynamically from Ioad()**
getgenv().Ioad = function(encryptedInput)
    local decryptedScript = customDecrypt(encryptedInput)
    print("\n✅ Decryption Successful! Executing script...\n")
    loadstring(decryptedScript)() -- Execute the decrypted script
end
