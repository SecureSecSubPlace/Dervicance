return function(encText)
    print("‚è≥ Loading.")

    local function decryptString(encText)
        print("Step 1 Done")

        local shift, map, encryptedData = encText:match("([^!]+)!([^!]+)!(.+)")

        if not shift or not map or not encryptedData then
            error("Decryption failed: Invalid encrypted string format.\nString: " .. tostring(encText))
        end

        local shiftValue = tonumber(shift)
        if not shiftValue then
            error("Decryption failed: Invalid shift value.\nString: " .. tostring(encText))
        end

        local mapTable = {}
        for num in map:gmatch("[^,]+") do
            table.insert(mapTable, tonumber(num) or 0)
        end

        local decryptedString = {}
        local index = 1

        for char in encryptedData:gmatch(".") do
            local mappedIndex = mapTable[index] or 0
            local charByte = string.byte(char)

            if not charByte then
                error("Invalid character in encrypted data: " .. tostring(char))
            end

            local decryptedValue = (charByte - shiftValue - mappedIndex) % 256
            table.insert(decryptedString, string.char(decryptedValue))

            index = index + 1
        end

        local finalDecrypted = table.concat(decryptedString)
        print("Step 2 Done")
        print("Decrypted Output:\n" .. finalDecrypted) -- **This prints the decrypted output**
        
        if finalDecrypted == "" then
            error("Decryption failed: Empty output.\nString: " .. tostring(encText))
        end

        return finalDecrypted
    end

    local decryptedCode = decryptString(encText)
    
    print("Step 3 finished running.")
    return decryptedCode
end
return decryptedCode
end
