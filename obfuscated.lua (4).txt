local function customDecrypt(encryptedCode, shiftMapString)
    -- Convert the shift map string back into a table
    local shiftMap = {}
    for shift in string.gmatch(shiftMapString, "([^,]+)") do
        table.insert(shiftMap, tonumber(shift))
    end

    -- Split the encrypted code by "!" to get the individual encrypted byte values
    local decrypted = {}
    local parts = {}
    for part in string.gmatch(encryptedCode, "([^!]+)") do
        table.insert(parts, part)
    end

    -- Decrypt by reversing the shifts from the shift map
    for i = 1, #parts do
        local encryptedByte = tonumber(parts[i])  -- Get the encrypted byte
        local shift = shiftMap[i]  -- Get the corresponding shift from the shift map
        table.insert(decrypted, string.char(encryptedByte - shift))  -- Reverse the shift and convert to character
    end

    -- Return the decrypted string
    return table.concat(decrypted)
end

-- Main decryption function
local function main(encryptedCode, shiftMapString)
    -- Decrypt the code
    local decryptedCode = customDecrypt(encryptedCode, shiftMapString)
    
    -- Execute the decrypted code
    loadstring(decryptedCode)()
end

-- Expecting the encrypted code and the shift map as arguments
main(arg[1], arg[2])
