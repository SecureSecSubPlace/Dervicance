return function(encryptedStr)
    if type(encryptedStr) ~= "string" or not encryptedStr:match("|") then
        error("‚ùå Invalid encrypted input: " .. tostring(encryptedStr))
    end

    -- Extract shift, map, and encrypted bytes
    local shift, map, encryptedBytes = encryptedStr:match("^(%d+)|([^|]+)|(.+)$")
    if not shift or not map or not encryptedBytes then
        error("‚ùå Failed to parse encryption format")
    end

    shift = tonumber(shift)
    if not shift then error("‚ùå Invalid shift value") end

    -- Parse map values (decryption instructions)
    local mapValues = {}
    for value in map:gmatch("%d+") do
        table.insert(mapValues, tonumber(value))
    end

    -- Debug print
    print("üîπ Shift Value:", shift)
    print("üîπ Map Values:", table.concat(mapValues, ","))

    -- Parse encrypted bytes and decrypt
    local decrypted = {}
    local byteIndex = 1
    for byte in encryptedBytes:gmatch("(%d+)!?") do
        local numByte = tonumber(byte)
        if numByte then
            local charShift = mapValues[byteIndex] or 0

            -- Debug print before processing
            print(string.format("üîπ Byte #%d: %d (Shift: %d, CharShift: %d)", byteIndex, numByte, shift, charShift))

            local originalByte = (numByte - shift - charShift) % 256

            -- Ensure valid byte range
            if originalByte < 0 or originalByte > 255 then
                error(string.format("‚ùå Byte out of range: %d at index %d", originalByte, byteIndex))
            end

            table.insert(decrypted, string.char(originalByte))
        else
            error(string.format("‚ùå Corrupt encrypted byte at index %d", byteIndex))
        end
        byteIndex = byteIndex + 1
    end

    -- Join decrypted characters into the original script
    local decodedScript = table.concat(decrypted)
    print("‚úÖ Decryption Successful!")

    -- Print the decrypted script for debugging
    print("üîπ Decrypted Code:\n" .. decodedScript)

    -- üéØ Execute the decrypted script
    local func, err = loadstring(decodedScript)
    if func then
        print("‚úÖ Running Decrypted Code...")
        return func()  -- Execute the script
    else
        error("‚ùå Failed to execute script: " .. err)
    end
end
